import numpy as np
from nltk import ngrams
import pdb

def convertTuple(tup):
    mystr = ''.join(tup)
    return mystr

#threegram embeddings by prot2vec

three_gram_embeddings = np.loadtxt("protVec_100d_3grams.csv",dtype=str)
threegramnames = three_gram_embeddings[:,0]
threegramnames = [x[1:] for x in threegramnames]
threegram_vecs = three_gram_embeddings[:,1:]
for item in threegram_vecs:
    item[-1] = item[-1][:-1]
threegram_vecs = threegram_vecs.astype(np.float)

embedding_dict = {}
for name, n in zip(threegramnames, range(len(threegramnames))):
    embedding_dict[name] = threegram_vecs[n]

#SOX2
seq1 = "MYNMMETELKPPGPQQTSGGGGGNSTAAAAGGNQKNSPDRVKRPMNAFMVWSRGQRRKMAQENPKMHNSEISKRLGAEWKLLSETEKRPFIDEAKRLRALHMKEHPDYKYRPRRKTKTLMKKDKYTLPGGLLAPGGNSMASGVGVGAGLGAGVNQRMDSYAHMNGWSNGSYSMMQDQLGYPQHPGLNAHGAAQMQPMHRYDVSALQYNSMTSSQTYMNGSPTYSMSYSQQGTPGMALGSMGSVVKSEASSSPPVVTSSSHSRAPCQAGDLRDMISMYLPGAEVPEPAAPSRLHMSQHYQSGPVPGTAINGTLPLSHM"

#SOX4
seq2 = "MVQQTNNAENTEALLAGESSDSGAGLELGIASSPTPGSTASTGGKADDPSWCKTPSGHIKRPMNAFMVWSQIERRKIMEQSPDMHNAEISKRLGKRWKLLKDSDKIPFIREAERLRLKHMADYPDYKYRPRKKVKSGNANSSSSAAASSKPGEKGDKVGGSGGGGHGGGGGGGSSNAGGGGGGASGGGANSKPAQKKSCGSKVAGGAGGGVSKPHAKLILAGGGGGGKAAAAAAASFAAEQAGAAALLPLGAAADHHSLYKARTPSASASASSAASASAALAAPGKHLAEKKVKRVYLFGGLGTSSSPVGGVGAGADPSDPLGLYEEEGAGCSPDAPSLSGRSSAASSPAAGRSPADHRGYASLRAASPAPSSAPSHASSSASSHSSSSSSSGSSSSDDEFEDDLLDLNPSSNFESMSLGSFSSSSALDRDLDFNFEPGSGSHFEFPDYCTPEVSEMISGDWLESSISNLVFTY"

#SOX7
seq3 = "MSMLAERRRKQKWAVDPQNTAWSNDDSKFGQRMLEKMGWSKGKGLGAQEQGATDHIKVQVKNNHLGLGATINNEDNWIAHQDDFNQLLAELNTCHGQETTDSSDKKEKKSFSLEEKSKISKNRVHYMKFTKGKSWKALTLSQKRPYVDEAERLRLQHMQDYPNYKYRPRRKKQAKRLCKRVDPGFLLSSLSRDQNALPEKRSGSRGALGEKEDRGEYSPGTALPSLRGCYHEGPAGGGGGGTPSSVDTYPYGLPTPPEMSPLDVLEPEQTFFSSPCQEEHGHPRRIPHLPGHPYSPEYAPSPLHCSHPLGSLALGQSPGVSMMSPVPGCPPSPAYYSPATYHPLHSNLQAHLGQLSPPPHPGFDALDQLSQVELLGDMDRNEFDQYLNTPGHPDSATGAMALSGHVPVSQVTPTGPTETSLISVLADATATYYNSYSVS"

#SOX8
seq4 = "MLDMSEARSQPPCSPSGTASSMSHVEDSDSDAPPSPAGSEGLGRAGVAVGGARGDPAEAADERFPACIRDAVSQVLKGYDWSLVPMPVRGGGGGALKAKPHVKRPMNAFMVWAQAARRKLADQYPHLHNAELSKTLGKLWRLLSESEKRPFVEEAERLRVQHKKDHPDYKYQPRRRKSAKAGHSDSDSGAELGPHPGGGAVYKAEAGLGDGHHHGDHTGQTHGPPTPPTTPKTELQQAGAKPELKLEGRRPVDSGRQNIDFSNVDISELSSEVMGTMDAFDVHEFDQYLPLGGPAPPEPGQAYGGAYFHAGASPVWAHKSAPSASASPTETGPPRPHIKTEQPSPGHYGDQPRGSPDYGSCSGQSSATPAAPAGPFAGSQGDYGDLQASSYYGAYPGYAPGLYQYPCFHSPRRPYASPLLNGLALPPAHSPTSHWDQPVYTTLTRP"

#SOX9
seq5 = "MNLLDPFMKMTDEQEKGLSGAPSPTMSEDSAGSPCPSGSGSDTENTRPQENTFPKGEPDLKKESEEDKFPVCIREAVSQVLKGYDWTLVPMPVRVNGSSKNKPHVKRPMNAFMVWAQAARRKLADQYPHLHNAELSKTLGKLWRLLNESEKRPFVEEAERLRVQHKKDHPDYKYQPRRRKSVKNGQAEAEEATEQTHISPNAIFKALQADSPHSSSGMSEVHSPGEHSGQSQGPPTPPTTPKTDVQPGKADLKREGRPLPEGGRQPPIDFRDVDIGELSSDVISNIETFDVNEFDQYLPPNGHPGVPATHGQVTYTGSYGISSTAATPASAGHVWMSKQQAPPPPPQQPPQAPPAPQAPPQPQAAPPQQPAAPPQQPQAHTLTTLSSEPGQSQRTHIKTEQLSPSHYSEQQQHSPQQIAYSPFNLPHYSPSYPPITRSQYDYTDHQNSSSYYSHAAGQGTGLYSTFTYMNPAQRPMYTPIADTSGVPSIPQTHSPQHWEQPVYTQLTRP"

#SOX10
seq6 = "MAEEQDLSEVELSPVGSEEPRCLSPGSAPSLGPDGGGGGSGLRASPGPGELGKVKKEQQDGEADDDKFPVCIREAVSQVLSGYDWTLVPMPVRVNGASKSKPHVKRPMNAFMVWAQAARRKLADQYPHLHNAELSKTLGKLWRLLNESDKRPFIEEAERLRMQHKKDHPDYKYQPRRRKNGKAAQGEAECPGGEAEQGGTAAIQAHYKSAHLDHRHPGEGSPMSDGNPEHPSGQSHGPPTPPTTPKTELQSGKADPKRDGRSMGEGGKPHIDFGNVDIGEISHEVMSNMETFDVAELDQYLPPNGHPGHVSSYSAAGYGLGSALAVASGHSAWISKPPGVALPTVSPPGVDAKAQVKTETAGPQGPPHYTDQPSTSQIAYTSLSLPHYGSAFPSISRPQFDYSDHQPSGPYYGHSGQASGLYSAFSYMGPSQRPLYTAISDPSPSGPQSHSPTHWEQPVYTTLSRP"

#SOX14
seq7= "MSKPSDHIKRPMNAFMVWSRGQRRKMAQENPKMHNSEISKRLGAEWKLLSEAEKRPYIDEAKRLRAQHMKEHPDYKYRPRRKPKNLLKKDRYVFPLPYLGDTDPLKAAGLPVGASDGLLSAPEKARAFLPPASAPYSLLDPAQFSSSAIQKMGEVPHTLATGALPYASTLGYQNGAFGSLSCPSQHTHTHPSPTNPGYVVPCNCTAWSASTLQPPVAYILFPGMTKTGIDPYSSAHATAM"

#SOX15
seq8 = "MALPGSSQDQAWSLEPPAATAAASSSSGPQEREGAGSPAAPGTLPLEKVKRPMNAFMVWSSAQRRQMAQQNPKMHNSEISKRLGAQWKLLDEDEKRPFVEEAKRLRARHLRDYPDYKYRPRRKAKSSGAGPSRCGQGRGNLASGGPLWGPGYATTQPSRGFGYRPPSYSTAYLPGSYGSSHCKLEAPSPCSLPQSDPRLQGELLPTYTHYLPPGSPTPYNPPLAGAPMPLTHL"

#SOX18
seq9 = "MQRSPPGYGAQDDPPARRDCAWAPGHGAAADTRGLAAGPAALAAPAAPASPPSPQRSPPRSPEPGRYGLSPAGRGERQAADESRIRRPMNAFMVWAKDERKRLAQQNPDLHNAVLSKMLGKAWKELNAAEKRPFVEEAERLRVQHLRDHPNYKYRPRRKKQARKARRLEPGLLLPGLAPPQPPPEPFPAASGSARAFRELPPLGAEFDGLGLPTPERSPLDGLEPGEAAFFPPPAAPEDCALRPFRAPYAPTELSRDPGGCYGAPLAEALRTAPPAAPLAGLYYGTLGTPGPYPGPLSPPPEAPPLESAEPLGPAADLWADVDLTEFDQYLNCSRTRPDAPGLPYHVALAKLGPRAMSCPEESSLISALSDASSAVYYSACISG"

#SOX21
seq10 = "MSKPVDHVKRPMNAFMVWSRAQRRKMAQENPKMHNSEISKRLGAEWKLLTESEKRPFIDEAKRLRAMHMKEHPDYKYRPRRKPKTLLKKDKFAFPVPYGLGGVADAEHPALKAGAGLHAGAGGGLVPESLLANPEKAAAAAAAAAARVFFPQSAAAAAAAAAAAAAGSPYSLLDLGSKMAEISSSSSGLPYASSLGYPTAGAGAFHGAAAAAAAAAAAAGGHTHSHPSPGNPGYMIPCNCSAWPSPGLQPPLAYILLPGMGKPQLDPYPAAYAAAL"


def seq2vec(seq):
    vec1 = np.zeros(100)
    threegrams = ngrams(seq, 3)
    threegrams = [convertTuple(grams) for grams in threegrams]
    for threegram in threegrams:
        prot2vec3gram = embedding_dict[threegram]
        vec1 = vec1 + prot2vec3gram
    return vec1

sox2_vec = seq2vec(seq1)
sox4_vec = seq2vec(seq2)
sox7_vec = seq2vec(seq3)
sox8_vec = seq2vec(seq4)
sox9_vec = seq2vec(seq5)
sox10_vec = seq2vec(seq6)
sox14_vec = seq2vec(seq7)
sox15_vec = seq2vec(seq8)
sox18_vec = seq2vec(seq9)
sox21_vec = seq2vec(seq10)

print("sox4 distance to sox2: ", np.linalg.norm(sox4_vec - sox2_vec))
print("sox4 distance to sox7: ",np.linalg.norm(sox4_vec - sox7_vec))
print("sox4 distance to sox8: ",np.linalg.norm(sox4_vec - sox8_vec))
print("sox4 distance to sox9: ",np.linalg.norm(sox4_vec - sox9_vec))
print("sox4 distance to sox10: ",np.linalg.norm(sox4_vec - sox10_vec))
print("sox4 distance to sox14: ",np.linalg.norm(sox4_vec - sox14_vec))
print("sox4 distance to sox15: ",np.linalg.norm(sox4_vec - sox15_vec))
print("sox4 distance to sox18: ",np.linalg.norm(sox4_vec - sox18_vec))
print("sox4 distance to sox21: ",np.linalg.norm(sox4_vec - sox21_vec))



pdb.set_trace()